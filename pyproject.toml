[project]
name = "iSponsorBlockTV"
version = "2.0.6"
authors = [{ "name" = "dmunozv04" }]
description = "SponsorBlock client for all YouTube TV clients"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Topic :: Home Automation",
]
dynamic = ["dependencies"]

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[project.urls]
"Homepage" = "https://github.com/dmunozv04/iSponsorBlockTV"
"Bug Tracker" = "https://github.com/dmunozv04/iSponsorBlockTV/issues"

[project.scripts]
"iSponsorBlockTV" = "iSponsorBlockTV.__main__:main"

[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[tool.pyright]
pythonVersion = "3.12"
reportIncompatibleMethodOverride = false

[tool.ruff]
line-length = 125
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "Q003",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PD",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "NPY",
    "RUF",
    "ASYNC",
]
ignore = [
    "G002",    # erroneous issue with %-logging when logging can be confiured for % logging
    "S101",    # use of assert here is a known quantity, blame typing memes
    "PLR2004", # Magic value comparison, may remove later
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "C90",     # mccabe complexity memes
    "ANN101",  # missing "Self" annotation, self is implicit
    "ANN202",  # implied return fine sometimes
    "ANN204",  # special method return types
    "ANN401",  # Any return
    "PLR0913", # number of function arguments
    "UP007",   # "Use | For Union" doesn't account for typevar tuple unpacking.
    "COM812",  # ruff format suggested
    "ISC001",  # ruff format suggested
    "E722",    # do not use bare except
    "F403",    # 'from module import *' used; unable to detect undefined names
    "F405",    # 'x' may be undefined, or defined from star imports: 'y'
    "G004",    # logging using f-strings
    "ERA001",  # commented code
    "TID252",  # prefer relative imports
]
unfixable = [
    "ERA", # I don't want anything erroneously detected deleted by this.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
